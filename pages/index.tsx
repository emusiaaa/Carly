import { Check, Login } from '@mui/icons-material'
import { Box, Button, Card, CircularProgress, Grid, TextField, Typography } from '@mui/material'
import Head from 'next/head'
import PageLayout from '../components/PageLayout'
import Image from 'next/image'
import { useRouter } from 'next/router'
import { useEffect, useState } from 'react'
import { useRecoilState } from 'recoil'
import { jwtToken } from '../recoil/jwtToken'

export default function Home() {
  const [token, setToken] = useRecoilState(jwtToken);
  const router = useRouter();

  const [user, setUser] = useState("");
  const [pass, setPass] = useState("");

  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | undefined>(undefined);

  // If token is set, redirect to homepage
  useEffect(() => {
    if (token !== undefined)
      setTimeout(() => router.push('/home'), 1000);
  }, [token])

  // States:
  // - Not logged in = no error, no token
  // - Not logged in with error = error, no token
  // - Loading
  // - Logged in = token

  const login = () => {
    setError(undefined);
    if (user === "" || pass === "") {
      setError("Username and password cannot be empty.");
      return;
    }
    setLoading(true);

    fetch("https://carlybaokend.azurewebsites.net/auth/login", {
      method: 'POST',
      body: JSON.stringify({
        username: user,
        password: pass
      }),
      headers: {
        'Content-Type': 'application/json'
      }
    })
      .then(response => {
        if (response.status === 401)
          throw 'Incorrect credentials.'
        if (!response.ok)
          throw response.statusText;
        
        return response.json();
      })
      .then(body => setToken(body.jwttoken))
      .catch(e => setError(e))
      .finally(() => setLoading(false))
  }

  return (
    <>
      <Head>
        <title>Carly</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/ColoredLogo.svg" />
      </Head>
      <main>
        <PageLayout hideDrawer>
          <Box sx={{
            width: '100%',
            height: '100%',
            display: 'flex',
            alignItems: 'center',
            alignContent: 'center',
            justifyContent: 'center'
          }}
          >
            <Card elevation={5} sx={{ mb: 15, borderRadius: 5 }}>
              <Grid
                sx={{ p: 2 }}
                spacing={2}
                container
                alignItems='center'
                alignContent='center'
                justifyContent='center'
                direction='column'
              >
                <Grid item>
                  <Image src="/ColoredLogo.svg" alt="Carly" width={138} height={48} />
                  <Typography sx={{ textAlign: 'center' }}>Employee portal</Typography>
                </Grid>
                <Grid item sx={{ width: '100%' }}>
                  <TextField
                    label="Username"
                    size='small'
                    disabled={loading}
                    value={user}
                    onChange={e => setUser(e.target.value)}
                    error={error !== undefined}
                    fullWidth
                  />
                </Grid>
                <Grid item sx={{ width: '100%' }}>
                  <TextField
                    label="Password"
                    size='small'
                    type="password"
                    disabled={loading}
                    value={pass}
                    onChange={e => setPass(e.target.value)}
                    error={error !== undefined}
                    helperText={error}
                    fullWidth
                  />
                </Grid>
                <Grid item sx={{ width: '100%' }}>
                  <Button
                    disabled={loading}
                    onClick={login}
                    sx={{
                      width: '100%',
                      bgcolor: token !== undefined ? '#5e9f32' : undefined
                    }}
                    variant="contained"
                    startIcon={
                      loading
                        ? <CircularProgress size={20} />
                        : token === undefined
                          ? <Login />
                          : <Check />
                    }
                  >
                    {
                      loading
                        ? "Please wait..."
                        : token === undefined
                          ? "Login"
                          : "Logged in"
                    }
                  </Button>
                </Grid>
              </Grid>
            </Card>
          </Box>
        </PageLayout>
      </main>
    </>
  )
}
